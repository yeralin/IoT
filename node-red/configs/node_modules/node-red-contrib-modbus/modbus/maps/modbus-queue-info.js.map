{"version":3,"sources":["modbus-queue-info.js"],"names":["module","exports","RED","require","install","internalDebugLog","nodes","registerType","config","createNode","this","name","topic","unitid","parseInt","lowLowLevel","ModbusQueueInfo","highLevel","highHighLevel","node","mbBasics","errorOnHighLevel","getNode","server","queueReadInterval","modbusClient","registerForModbus","resetStates","lowLowLevelReached","initModbusClientEvents","highHighLevelReached","unit","bufferCommands","readFromQueue","get","length","items","lowLevelReached","lowLevel","payload","Date","now","state","modbusClientName","highLevelReached","send","msg","error","warn","fillColor","status","fill","text","onModbusInit","onModbusActive","onModbusQueue","on","setInterval","queueReadIntervalTime","isInteger","queueEnabled","queue","bufferCommandList","date","lowlowLevel","resetQueue","initQueue","settings","verbose","infoText","shape","queueOptions","done","setNodeStatusTo","clearInterval","deregisterForModbus"],"mappings":"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","file":"../modbus-queue-info.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019 Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus Read node.\n * @module NodeRedModbusRead\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const internalDebugLog = require('debug')('contribModbus:queue')\n\n  function ModbusQueueInfo (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.topic = config.topic\n    this.unitid = parseInt(config.unitid)\n    this.lowLowLevel = parseInt(config.lowLowLevel)\n    this.lowLevel = parseInt(config.lowLevel)\n    this.highLevel = parseInt(config.highLevel)\n    this.highHighLevel = parseInt(config.highHighLevel)\n    this.errorOnHighLevel = config.errorOnHighLevel\n    this.queueReadIntervalTime = config.queueReadIntervalTime || 1000\n\n    const node = this\n    node.queueReadInterval = null\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.resetStates = function () {\n      node.lowLowLevelReached = true\n      node.lowLevelReached = false\n      node.highLevelReached = false\n      node.highHighLevelReached = false\n    }\n\n    node.resetStates()\n\n    node.readFromQueue = function () {\n      let unit = node.unitid || 1\n\n      if (modbusClient.bufferCommands) {\n        if (unit < 0 || unit > 255) {\n          unit = 1\n        }\n\n        const items = modbusClient.bufferCommandList.get(unit).length\n\n        if (!items || (!node.lowLowLevelReached && items < node.lowLowLevel)) {\n          node.resetStates()\n        }\n\n        if (!node.lowLevelReached && items > node.lowLowLevel && items < node.lowLevel) {\n          node.lowLevelReached = true\n          const msg = {\n            payload: Date.now(),\n            topic: node.topic,\n            state: 'low level reached',\n            unitid: unit,\n            modbusClientName: modbusClient.name,\n            items: items\n          }\n\n          node.send(msg)\n        }\n\n        if (!node.highLevelReached && items > node.lowLevel && items > node.highLevel) {\n          node.highLevelReached = true\n          const msg = {\n            payload: Date.now(),\n            topic: node.topic,\n            state: 'high level reached',\n            unitid: unit,\n            modbusClientName: modbusClient.name,\n            highLevel: node.highLevel,\n            items: items\n          }\n\n          if (node.errorOnHighLevel) {\n            node.error(new Error('Queue High Level Reached'), msg)\n          } else {\n            node.warn(msg)\n          }\n\n          node.send(msg)\n        }\n\n        if (!node.highHighLevelReached && items > node.highLevel && items > node.highHighLevel) {\n          node.highHighLevelReached = true\n          const msg = {\n            payload: Date.now(),\n            topic: node.topic,\n            state: 'high high level reached',\n            unitid: unit,\n            modbusClientName: modbusClient.name,\n            highLevel: node.highLevel,\n            highHighLevel: node.highHighLevel,\n            items: items\n          }\n          node.error(new Error('Queue High High Level Reached'), msg)\n          node.send(msg)\n        }\n\n        let fillColor = 'blue'\n        if (node.lowLevelReached) {\n          fillColor = 'green'\n        }\n\n        if (node.highLevelReached) {\n          if (node.errorOnHighLevel) {\n            fillColor = 'red'\n          } else {\n            fillColor = 'yellow'\n          }\n        }\n\n        if (node.highHighLevelReached) {\n          fillColor = 'red'\n        }\n\n        node.status({\n          fill: fillColor,\n          shape: 'ring',\n          text: 'active unit ' + unit + ' queue items: ' + items\n        })\n      } else {\n        mbBasics.setNodeStatusTo('active unit ' + unit + ' without queue', node)\n      }\n    }\n\n    node.onModbusInit = function () {\n      node.readFromQueue()\n    }\n\n    node.onModbusActive = function () {\n      node.readFromQueue()\n    }\n\n    node.onModbusQueue = function () {\n      node.readFromQueue()\n    }\n\n    modbusClient.on('mbinit', node.onModbusInit)\n    modbusClient.on('mbqueue', node.onModbusQueue)\n    modbusClient.on('mbactive', node.onModbusActive)\n\n    node.queueReadInterval = setInterval(node.readFromQueue, node.queueReadIntervalTime)\n\n    node.on('input', function (msg) {\n      msg.queueEnabled = modbusClient.bufferCommands\n\n      if (Number.isInteger(node.unitid)) {\n        msg.queue = modbusClient.bufferCommandList.get(node.unitid)\n        msg.unitid = node.unitid\n      } else {\n        msg.queues = modbusClient.bufferCommandList\n      }\n\n      msg.queueOptions = {\n        date: Date.now(),\n        state: 'queue request',\n        modbusClientName: modbusClient.name,\n        lowlowLevel: node.lowlowLevel,\n        lowLevel: node.lowLevel,\n        highLevel: node.highLevel,\n        highHighLevel: node.highHighLevel\n      }\n\n      if (msg && msg.resetQueue && modbusClient.bufferCommands) {\n        modbusClient.initQueue()\n        if (RED.settings.verbose) {\n          const infoText = 'Init Queue By External Node'\n          modbusClient.warn(infoText)\n          internalDebugLog(infoText)\n        }\n        node.resetStates()\n        node.status({\n          fill: 'blue',\n          shape: 'ring',\n          text: 'active empty unit queue'\n        })\n        msg.queueOptions.state = 'queue reset done'\n      }\n\n      node.send(msg)\n    })\n\n    node.on('close', function (done) {\n      mbBasics.setNodeStatusTo('closed', node)\n      if (node.queueReadInterval) {\n        clearInterval(node.queueReadInterval)\n      }\n      node.queueReadInterval = null\n      modbusClient.deregisterForModbus(node, done)\n    })\n  }\n\n  RED.nodes.registerType('modbus-queue-info', ModbusQueueInfo)\n}\n"]}