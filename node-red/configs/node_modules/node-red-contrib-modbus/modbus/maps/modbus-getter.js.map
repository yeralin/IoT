{"version":3,"sources":["modbus-getter.js"],"names":["module","exports","RED","require","install","mbCore","mbIOCore","modbusClient","deregisterForModbus","config","nodes","createNode","this","name","unitid","internalDebugLog","adr","quantity","ModbusGetter","showStatusActivities","dataType","showErrors","getNode","ioFile","msgThruput","connection","logIOActivities","node","useIOForPayload","Map","mbBasics","bufferMessageList","server","initModbusClientEvents","onModbusCommandDone","resp","msg","data","onModbusCommandError","err","message","error","getOriginalMessage","on","client","messageId","getObjectId","set","topic","id","payload","value","fc","address","emit","_msgid","setNodeStatusTo","clear","done"],"mappings":"aAaAA,OAAOC,QAAU,SAAUC,GAEzBC,QAAQ,sBAAsBC,UAFhCJ,IAAOC,EAAUE,QAAUD,mBACzBG,EAAAF,QAAA,sBAIMG,EAAWH,QAAQ,yBAHzBA,EAAQA,QAAsBC,QAAtBD,CAAR,wBAuFII,EAAAA,MAAAA,aAAaC,gBAtFjB,SAAyBC,GAMvBP,EAAIQ,MAAMC,WAAWC,KAAMH,GAE3BG,KAAKC,KAAOJ,EAAOI,KANrBD,KAAMN,OAAWH,EAAQW,OACzBF,KAAMG,SAAAA,EAAmBZ,SASvBS,KAAKI,IAAMP,EAAOO,IAPpBJ,KAAAK,SAASC,EAAcT,SAGrBG,KAAKC,qBAALJ,EAAAU,qBACAP,KAAKE,WAASL,EAAOK,WAErBF,KAAKQ,WAAWX,EAAOW,WACvBR,KAAKI,WAAaA,KAGlBJ,KAAKO,UAAAA,EAAAA,UACLP,KAAKS,OAAAA,EAAaZ,MAAMa,QAACD,EAAzBE,QACAX,KAAKY,gBAAaf,EAAOe,gBACzBZ,KAAKa,gBAALhB,EAAAiB,gBAGA,IAAKH,EAALX,KACAe,EAAKC,kBAAkBnB,IAAMoB,IAC7BC,EAAKJ,gBAAkBjB,UAAOiB,GAG9BC,IAAKI,EAAAA,EAAoBrB,MAAImB,QAA7BpB,EAAAuB,QACAF,IAGAvB,EAAKA,kBAAcoB,GACjBG,EAAAG,uBAAAN,EAAApB,GAKFoB,EAAKO,oBAAsB,SAAUC,EAAMC,GAH3C7B,EAAAA,sBACAuB,EAASG,gBAAAA,eAA6B1B,GAEtCoB,EAAKO,KAAAA,EAAAA,mBAAgCC,EAAVA,EAAqBE,KAAAF,EAAAC,KAG7CT,EAAAW,qBAAA,SAAAC,EAAAH,GAKDrB,EAAiBwB,EAAIC,SAJjBb,EAAJN,YAJFM,EAAAc,MAAAF,EAAAH,GAOAT,EAAKW,eAALX,EAA4BpB,EAAAgC,EAAoBlC,EAAAqC,mBAAAf,EAAAI,kBAAAK,KAE9CT,EAAAgB,GAAIhB,QAAKN,SAAYe,GACnBT,EAAWY,iBAAXH,IAHJ7B,EAAAqC,SAUIR,EAAAS,UAAAxC,EAAAyC,cACDnB,EAAAI,kBAAAgB,IAAAX,EAAAS,UAAAT,GAEDA,EAAK7B,CACHyC,MAAAZ,EAAAY,OAAArB,EAAAsB,GACDC,QAAA,CAQGC,MAAOf,EAAIc,QAAQC,OAASf,EAAIc,QANhCL,OAAAA,EAAYxC,OACZ+C,GAACrB,EAAAA,uBAA0Bc,EAAWT,UAEvCiB,QAAG1B,EAAAX,IACJgC,SAAWA,EAAJ/B,SACPiC,UAASd,EAAAS,WAEP/B,OAAMsB,EAAET,QAGRV,EAAQqC,KAAM,aALPlB,EAAAT,EAAAO,oBAAAP,EAAAW,sBAFLX,EAAAR,sBAUJoC,EAAQnB,gBAAImB,EAAAA,mBAAAA,MAKd5B,EAAAgB,GAAIhB,QAAKR,SAAAA,GACPW,EAAAA,gBAAS0B,SAAgBjD,GAC1BoB,EAAAI,kBAAA0B,QA7BHlD,EAAAC,oBAAAmB,EAAA+B","file":"../modbus-getter.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019 Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n/**\n * Modbus Getter node.\n * @module NodeRedModbusGetter\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const mbIOCore = require('./core/modbus-io-core')\n  const internalDebugLog = require('debug')('contribModbus:getter')\n\n  function ModbusGetter (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.unitid = config.unitid\n\n    this.dataType = config.dataType\n    this.adr = config.adr\n    this.quantity = config.quantity\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.msgThruput = config.msgThruput\n    this.connection = null\n\n    this.useIOFile = config.useIOFile\n    this.ioFile = RED.nodes.getNode(config.ioFile)\n    this.useIOForPayload = config.useIOForPayload\n    this.logIOActivities = config.logIOActivities\n\n    const node = this\n    node.bufferMessageList = new Map()\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.onModbusCommandDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('reading done', node)\n      }\n      node.send(mbIOCore.buildMessageWithIO(node, resp.data, resp, msg))\n    }\n\n    node.onModbusCommandError = function (err, msg) {\n      internalDebugLog(err.message)\n      if (node.showErrors) {\n        node.error(err, msg)\n      }\n      mbBasics.setModbusError(node, modbusClient, err, mbCore.getOriginalMessage(node.bufferMessageList, msg))\n    }\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        return\n      }\n\n      if (!modbusClient.client) {\n        return\n      }\n\n      msg.messageId = mbCore.getObjectId()\n      node.bufferMessageList.set(msg.messageId, msg)\n\n      msg = {\n        topic: msg.topic || node.id,\n        payload: {\n          value: msg.payload.value || msg.payload,\n          unitid: node.unitid,\n          fc: mbCore.functionCodeModbusRead(node.dataType),\n          address: node.adr,\n          quantity: node.quantity,\n          messageId: msg.messageId\n        },\n        _msgid: msg._msgid\n      }\n\n      modbusClient.emit('readModbus', msg, node.onModbusCommandDone, node.onModbusCommandError)\n\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n      }\n    })\n\n    node.on('close', function (done) {\n      mbBasics.setNodeStatusTo('closed', node)\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node, done)\n    })\n  }\n\n  RED.nodes.registerType('modbus-getter', ModbusGetter)\n}\n"]}