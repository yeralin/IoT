"use strict";module.exports=function(t){require("source-map-support").install();var r=require("./modbus-basics"),u=require("debug")("contribModbus:queue");t.nodes.registerType("modbus-queue-info",function(e){t.nodes.createNode(this,e),this.name=e.name,this.topic=e.topic,this.unitid=parseInt(e.unitid),this.lowLowLevel=parseInt(e.lowLowLevel),this.lowLevel=parseInt(e.lowLevel),this.highLevel=parseInt(e.highLevel),this.highHighLevel=parseInt(e.highHighLevel),this.errorOnHighLevel=e.errorOnHighLevel,this.queueReadIntervalTime=e.queueReadIntervalTime||1e3;var l=this;l.queueReadInterval=null,r.setNodeStatusTo("waiting",l);var a=t.nodes.getNode(e.server);a&&(a.registerForModbus(l),r.initModbusClientEvents(l,a),l.resetStates=function(){l.lowLowLevelReached=!0,l.lowLevelReached=!1,l.highLevelReached=!1,l.highHighLevelReached=!1},l.resetStates(),l.readFromQueue=function(){var e=l.unitid||1;if(a.bufferCommands){(e<0||255<e)&&(e=1);var i=a.bufferCommandList.get(e).length;if((!i||!l.lowLowLevelReached&&i<l.lowLowLevel)&&l.resetStates(),!l.lowLevelReached&&i>l.lowLowLevel&&i<l.lowLevel){l.lowLevelReached=!0;var t={payload:Date.now(),topic:l.topic,state:"low level reached",unitid:e,modbusClientName:a.name,items:i};l.send(t)}if(!l.highLevelReached&&i>l.lowLevel&&i>l.highLevel){l.highLevelReached=!0;var u={payload:Date.now(),topic:l.topic,state:"high level reached",unitid:e,modbusClientName:a.name,highLevel:l.highLevel,items:i};l.errorOnHighLevel?l.error(new Error("Queue High Level Reached"),u):l.warn(u),l.send(u)}if(!l.highHighLevelReached&&i>l.highLevel&&i>l.highHighLevel){l.highHighLevelReached=!0;var o={payload:Date.now(),topic:l.topic,state:"high high level reached",unitid:e,modbusClientName:a.name,highLevel:l.highLevel,highHighLevel:l.highHighLevel,items:i};l.error(new Error("Queue High High Level Reached"),o),l.send(o)}var n="blue";l.lowLevelReached&&(n="green"),l.highLevelReached&&(n=l.errorOnHighLevel?"red":"yellow"),l.highHighLevelReached&&(n="red"),l.status({fill:n,shape:"ring",text:"active unit "+e+" queue items: "+i})}else r.setNodeStatusTo("active unit "+e+" without queue",l)},l.onModbusInit=function(){l.readFromQueue()},l.onModbusActive=function(){l.readFromQueue()},l.onModbusQueue=function(){l.readFromQueue()},a.on("mbinit",l.onModbusInit),a.on("mbqueue",l.onModbusQueue),a.on("mbactive",l.onModbusActive),l.queueReadInterval=setInterval(l.readFromQueue,l.queueReadIntervalTime),l.on("input",function(e){if(e.queueEnabled=a.bufferCommands,Number.isInteger(l.unitid)?(e.queue=a.bufferCommandList.get(l.unitid),e.unitid=l.unitid):e.queues=a.bufferCommandList,e.queueOptions={date:Date.now(),state:"queue request",modbusClientName:a.name,lowlowLevel:l.lowlowLevel,lowLevel:l.lowLevel,highLevel:l.highLevel,highHighLevel:l.highHighLevel},e&&e.resetQueue&&a.bufferCommands){if(a.initQueue(),t.settings.verbose){var i="Init Queue By External Node";a.warn(i),u(i)}l.resetStates(),l.status({fill:"blue",shape:"ring",text:"active empty unit queue"}),e.queueOptions.state="queue reset done"}l.send(e)}),l.on("close",function(e){r.setNodeStatusTo("closed",l),l.queueReadInterval&&clearInterval(l.queueReadInterval),l.queueReadInterval=null,a.deregisterForModbus(l,e)}))})};
//# sourceMappingURL=maps/modbus-queue-info.js.map
