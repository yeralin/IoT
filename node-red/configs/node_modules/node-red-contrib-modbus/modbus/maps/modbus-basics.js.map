{"version":3,"sources":["modbus-basics.js"],"names":["require","install","de","biancoroyal","modbus","basics","internalDebug","util","statusLog","get_timeUnit_name","unit","unitAbbreviation","calc_rateByUnit","rate","rateUnit","parseInt","setNodeStatusProperties","statusValue","showActivities","fillValue","shapeValue","statusText","value","shape","status","setNodeStatusByResponseTo","response","node","fill","text","this","inspect","setNodeStatusResponse","length","setModbusError","modbusClient","err","msg","message","setNodeStatusTo","emit","statusOptions","showStatusActivities","onModbusInit","onModbusConnect","onModbusActive","onModbusError","failureMsg","showErrors","warn","onModbusClose","onModbusBroken","reconnectTimeout","initModbusClientEvents","_this","on","invalidPayloadIn","hasOwnProperty","call","module","exports"],"mappings":"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","file":"../modbus-basics.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019 Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n'use strict'\nrequire('source-map-support').install()\n\nvar de = de || { biancoroyal: { modbus: { basics: {} } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.basics.internalDebug = de.biancoroyal.modbus.basics.internalDebug || require('debug')('contribModbus:basics') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.basics.util = de.biancoroyal.modbus.basics.util || require('util') // eslint-disable-line no-use-before-define\n\n/**\n * Modbus core node basics.\n * @module NodeRedModbusBasics\n */\nde.biancoroyal.modbus.basics.statusLog = false\n/**\n *\n * @param unit\n * @returns {string}\n */\nde.biancoroyal.modbus.basics.get_timeUnit_name = function (unit) {\n  let unitAbbreviation = ''\n\n  switch (unit) {\n    case 'ms':\n      unitAbbreviation = 'msec.'\n      break\n    case 's':\n      unitAbbreviation = 'sec.'\n      break\n    case 'm':\n      unitAbbreviation = 'min.'\n      break\n    case 'h':\n      unitAbbreviation = 'h.'\n      break\n    default:\n      break\n  }\n\n  return unitAbbreviation\n}\n\nde.biancoroyal.modbus.basics.calc_rateByUnit = function (rate, rateUnit) {\n  switch (rateUnit) {\n    case 'ms':\n      break\n    case 's':\n      rate = parseInt(rate) * 1000 // seconds\n      break\n    case 'm':\n      rate = parseInt(rate) * 60000 // minutes\n      break\n    case 'h':\n      rate = parseInt(rate) * 3600000 // hours\n      break\n    default:\n      rate = 10000 // 10 sec.\n      break\n  }\n\n  return rate\n}\n/**\n *\n * @param statusValue\n * @param showActivities\n * @returns {{fill: string, shape: string, status: *}}\n */\nde.biancoroyal.modbus.basics.setNodeStatusProperties = function (statusValue, showActivities) {\n  let fillValue = 'yellow'\n  let shapeValue = 'ring'\n\n  if (!statusValue) {\n    statusValue = 'waiting'\n  }\n\n  let statusText = statusValue.value || statusValue\n\n  switch (statusText) {\n    case 'connecting':\n      fillValue = 'yellow'\n      shapeValue = 'ring'\n      break\n\n    case 'error':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'initialized':\n      fillValue = 'yellow'\n      shapeValue = 'dot'\n      break\n\n    case 'not ready to read':\n    case 'not ready to write':\n      fillValue = 'yellow'\n      shapeValue = 'ring'\n      break\n\n    case 'connected':\n      fillValue = 'green'\n      shapeValue = 'ring'\n      break\n\n    case 'timeout':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'active':\n    case 'reading':\n    case 'writing':\n    case 'active reading':\n    case 'active writing':\n      if (!showActivities) {\n        statusText = 'active'\n      }\n      fillValue = 'green'\n      shapeValue = 'dot'\n      break\n\n    case 'disconnected':\n    case 'terminated':\n      fillValue = 'red'\n      shapeValue = 'ring'\n      break\n\n    case 'stopped':\n      fillValue = 'red'\n      shapeValue = 'dot'\n      break\n\n    case 'polling':\n      fillValue = 'green'\n      if (showActivities) {\n        shapeValue = 'ring'\n      } else {\n        statusText = 'active'\n        shapeValue = 'dot'\n      }\n      break\n\n    default:\n      if (statusText === 'waiting') {\n        fillValue = 'blue'\n        statusText = 'waiting ...'\n      }\n      break\n  }\n\n  return { fill: fillValue, shape: shapeValue, status: statusText }\n}\n\nde.biancoroyal.modbus.basics.setNodeStatusByResponseTo = function (statusValue, response, node) {\n  let fillValue = 'red'\n  let shapeValue = 'dot'\n\n  switch (statusValue) {\n    case 'initialized':\n      fillValue = 'green'\n      shapeValue = 'ring'\n      break\n\n    case 'active':\n      fillValue = 'green'\n      shapeValue = 'dot'\n      break\n\n    default:\n      if (!statusValue || statusValue === 'waiting') {\n        fillValue = 'blue'\n        statusValue = 'waiting ...'\n      }\n      break\n  }\n\n  node.status({ fill: fillValue, shape: shapeValue, text: this.util.inspect(response, false, null) })\n}\n\nde.biancoroyal.modbus.basics.setNodeStatusResponse = function (length, node) {\n  node.status({\n    fill: 'green',\n    shape: 'dot',\n    text: 'active got length: ' + length\n  })\n}\n\nde.biancoroyal.modbus.basics.setModbusError = function (node, modbusClient, err, msg) {\n  if (err) {\n    switch (err.message) {\n      case 'Timed out':\n        this.setNodeStatusTo('timeout', node)\n        break\n      case 'FSM Not Ready To Reconnect':\n        this.setNodeStatusTo('not ready to reconnect', node)\n        break\n      case 'Port Not Open':\n        this.setNodeStatusTo('reconnect', node)\n        modbusClient.emit('reconnect')\n        break\n      default:\n        this.internalDebug(err.message)\n        if (node.showErrors) {\n          this.setNodeStatusTo('error ' + err.message, node)\n          node.error(err, msg)\n        }\n    }\n  }\n}\n\nde.biancoroyal.modbus.basics.setNodeStatusTo = function (statusValue, node) {\n  const statusOptions = this.setNodeStatusProperties(statusValue, node.showStatusActivities)\n\n  node.status({\n    fill: statusOptions.fill,\n    shape: statusOptions.shape,\n    text: statusOptions.status\n  })\n}\n\nde.biancoroyal.modbus.basics.onModbusInit = function (node) {\n  this.setNodeStatusTo('initialize', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusConnect = function (node) {\n  this.setNodeStatusTo('connected', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusActive = function (node) {\n  this.setNodeStatusTo('active', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusError = function (node, failureMsg) {\n  this.setNodeStatusTo('failure', node)\n  if (node.showErrors) {\n    node.warn(failureMsg)\n  }\n}\n\nde.biancoroyal.modbus.basics.onModbusClose = function (node) {\n  this.setNodeStatusTo('closed', node)\n}\n\nde.biancoroyal.modbus.basics.onModbusBroken = function (node, modbusClient) {\n  this.setNodeStatusTo('reconnecting after ' + modbusClient.reconnectTimeout + ' msec.', node)\n}\n\nde.biancoroyal.modbus.basics.initModbusClientEvents = function (node, modbusClient) {\n  modbusClient.on('mbinit', () => { this.onModbusInit(node) })\n  modbusClient.on('mbconnected', () => { this.onModbusConnect(node) })\n  modbusClient.on('mbactive', () => { this.onModbusActive(node) })\n  modbusClient.on('mberror', (failureMsg) => { this.onModbusError(node, failureMsg) })\n  modbusClient.on('mbbroken', () => { this.onModbusBroken(node, modbusClient) })\n  modbusClient.on('mbclosed', () => { this.onModbusClose(node) })\n}\n\nde.biancoroyal.modbus.basics.invalidPayloadIn = function (msg) {\n  return !(msg && Object.prototype.hasOwnProperty.call(msg, 'payload'))\n}\n\nmodule.exports = de.biancoroyal.modbus.basics\n"]}