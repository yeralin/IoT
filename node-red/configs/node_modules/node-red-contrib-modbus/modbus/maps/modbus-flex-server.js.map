{"version":3,"sources":["modbus-flex-server.js"],"names":["module","exports","RED","require","install","mbBasics","internalDebugLog","type","registerType","config","ModbusRTU","this","_require","VM","VMScript","name","serverAddress","serverPort","ModbusFlexServer","nodes","parseInt","responseDelay","delayUnit","unitId","minAddress","showErrors","logEnabled","funcGetCoil","compile","funcGetDiscreteInput","funcGetInputRegister","funcGetHoldingRegister","funcSetCoil","funcSetRegister","node","alloc","Buffer","registersBufferSize","coilsBufferSize","coils","vector","vm","sandbox","run","startServer","modbusServer","ServerTCP","host","port","debug","unitID","err","error","payload","on","message","close","_server","sock","stringify","address","remoteAddress","remotePort","setNodeStatusTo","warn","msg","register","isInteger","Number","writeUInt16BE","value","splitAddress","bufferFactor","writeUInt8","disablemsg","send","registers","slice","buildMessage"],"mappings":"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","file":"../modbus-flex-server.js","sourcesContent":["/**\n Copyright (c) 2017,2018 Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus Server node.\n * @module NodeRedModbusServer\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const ModbusRTU = require('modbus-serial')\n  const mbBasics = require('./modbus-basics')\n  const internalDebugLog = require('debug')('contribModbus:flex:server')\n\n  function ModbusFlexServer (config) {\n    RED.nodes.createNode(this, config)\n    const { VM, VMScript } = require('vm2')\n\n    this.name = config.name\n    this.logEnabled = config.logEnabled\n    this.serverAddress = config.serverAddress || '0.0.0.0'\n    this.serverPort = parseInt(config.serverPort)\n    this.responseDelay = parseInt(config.responseDelay)\n    this.delayUnit = config.delayUnit\n    this.unitId = config.unitId\n    this.minAddress = config.minAddress\n    this.splitAddress = config.splitAddress\n    this.showErrors = config.showErrors\n\n    this.funcGetCoil = new VMScript(config.funcGetCoil).compile()\n    this.funcGetDiscreteInput = new VMScript(config.funcGetDiscreteInput).compile()\n    this.funcGetInputRegister = new VMScript(config.funcGetInputRegister).compile()\n    this.funcGetHoldingRegister = new VMScript(config.funcGetHoldingRegister).compile()\n\n    this.funcSetCoil = new VMScript(config.funcSetCoil).compile()\n    this.funcSetRegister = new VMScript(config.funcSetRegister).compile()\n\n    const node = this\n    node.bufferFactor = 8\n\n    node.coilsBufferSize = parseInt(config.coilsBufferSize * node.bufferFactor)\n    node.registersBufferSize = parseInt(config.registersBufferSize * node.bufferFactor)\n\n    node.coils = Buffer.alloc(node.coilsBufferSize, 0)\n    node.registers = Buffer.alloc(node.registersBufferSize, 0)\n\n    node.modbusServer = null\n\n    mbBasics.setNodeStatusTo('initialized', node)\n\n    //     1...10000*  address - 1      Coils (outputs)    0   Read/Write\n    // 10001...20000*  address - 10001  Discrete Inputs    01  Read\n    // 30001...40000*  address - 30001  Input Registers    04  Read\n    // 40001...50000*  address - 40001  Holding Registers  03  Read/Write\n\n    node.vector = {}\n\n    const vm = new VM({\n      sandbox: { node }\n    })\n\n    vm.run('node.vector.getCoil = ' + config.funcGetCoil)\n    vm.run('node.vector.getDiscreteInput = ' + config.funcGetDiscreteInput)\n    vm.run('node.vector.getInputRegister = ' + config.funcGetInputRegister)\n    vm.run('node.vector.getHoldingRegister = ' + config.funcGetHoldingRegister)\n\n    vm.run('node.vector.setCoil = ' + config.funcSetCoil)\n    vm.run('node.vector.setRegister = ' + config.funcSetRegister)\n\n    node.startServer = function () {\n      try {\n        if (node.modbusServer === null) {\n          try {\n            node.modbusServer = new ModbusRTU.ServerTCP(node.vector, {\n              host: node.serverAddress,\n              port: node.serverPort,\n              debug: node.logEnabled,\n              unitID: node.unitId\n            })\n          } catch (err) {\n            node.error(err, { payload: 'server net error -> for port 502 on unix, you have to be a super user' })\n          }\n\n          node.modbusServer.on('socketError', function (err) {\n            internalDebugLog(err.message)\n            if (node.showErrors) {\n              node.warn(err)\n            }\n            mbBasics.setNodeStatusTo('error', node)\n\n            node.modbusServer.close(function () {\n              node.startServer()\n            })\n          })\n\n          node.modbusServer._server.on('connection', function (sock) {\n            internalDebugLog('Modbus Flex Server client connection')\n            if (sock) {\n              internalDebugLog('Modbus Flex Server client to ' + JSON.stringify(sock.address()) + ' from ' + sock.remoteAddress + ' ' + sock.remotePort)\n            }\n            mbBasics.setNodeStatusTo('active', node)\n          })\n        }\n      } catch (err) {\n        internalDebugLog(err.message)\n        if (node.showErrors) {\n          node.warn(err)\n        }\n        mbBasics.setNodeStatusTo('error', node)\n      }\n\n      if (node.modbusServer != null) {\n        internalDebugLog('Modbus Flex Server listening on modbus://' + node.serverAddress + ':' + node.serverPort)\n        mbBasics.setNodeStatusTo('initialized', node)\n      } else {\n        internalDebugLog('Modbus Flex Server isn\\'t ready')\n        mbBasics.setNodeStatusTo('error', node)\n      }\n    }\n\n    node.startServer()\n\n    node.on('input', function (msg) {\n      if (msg.payload.register === 'holding' ||\n            msg.payload.register === 'coils' ||\n            msg.payload.register === 'input' ||\n            msg.payload.register === 'discrete') {\n        if (!(Number.isInteger(msg.payload.address) &&\n                  msg.payload.address >= 0 &&\n                  msg.payload.address <= 65535)) {\n          node.error('Address Not Valid', msg)\n          return\n        }\n        switch (msg.payload.register) {\n          case 'holding':\n            node.registers.writeUInt16BE(msg.payload.value, (msg.payload.address + node.splitAddress) * node.bufferFactor)\n            break\n          case 'coils':\n            node.coils.writeUInt8(msg.payload.value, msg.payload.address * node.bufferFactor)\n            break\n          case 'input':\n            node.registers.writeUInt16BE(msg.payload.value, msg.payload.address * node.bufferFactor)\n            break\n          case 'discrete':\n            node.coils.writeUInt8(msg.payload.value, (msg.payload.address + node.splitAddress) * node.bufferFactor)\n            break\n        }\n      }\n\n      if (msg.payload.disablemsg !== 1) {\n        node.send(buildMessage(msg))\n      }\n    })\n\n    function buildMessage (msg) {\n      return [\n        { type: 'holding', message: msg, payload: node.registers.slice(node.splitAddress * node.bufferFactor) },\n        { type: 'coils', message: msg, payload: node.coils.slice(0, node.splitAddress * node.bufferFactor) },\n        { type: 'input', message: msg, payload: node.registers.slice(0, node.splitAddress * node.bufferFactor) },\n        { type: 'discrete', message: msg, payload: node.coils.slice(node.splitAddress * node.bufferFactor) }\n      ]\n    }\n\n    node.on('close', function () {\n      mbBasics.setNodeStatusTo('closed', node)\n      if (node.modbusServer._server) {\n        node.modbusServer._server.close()\n      }\n      node.modbusServer = null\n    })\n  }\n\n  try {\n    RED.nodes.registerType('modbus-flex-server', ModbusFlexServer)\n  } catch (err) {\n    internalDebugLog(err.message)\n  }\n}\n"]}