{"version":3,"sources":["modbus-flex-write.js"],"names":["module","exports","RED","require","install","mbCore","internalDebugLog","nodes","registerType","config","mbBasics","createNode","this","name","showStatusActivities","node","ModbusFlexWrite","setNodeStatusTo","showErrors","server","modbusClient","getNode","initModbusClientEvents","onModbusWriteDone","resp","msg","send","buildMessage","bufferMessageList","payload","err","message","setModbusError","getOriginalMessage","on","JSON","parse","fc","parseInt","unitid","address","quantity","isInteger","Number","error","Object","prototype","hasOwnProperty","call","value","indexOf","messageId","getObjectId","topic","id","_msgid","emit","onModbusWriteError","actualServiceState","done","clear","deregisterForModbus"],"mappings":"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","file":"../modbus-flex-write.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019 Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus flexible Write node.\n * @module NodeRedModbusFlexWrite\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const internalDebugLog = require('debug')('contribModbus:flex:write')\n\n  function ModbusFlexWrite (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n\n    const node = this\n    node.bufferMessageList = new Map()\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.onModbusWriteDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('writing done', node)\n      }\n\n      node.send(mbCore.buildMessage(node.bufferMessageList, msg.payload, resp, msg))\n    }\n\n    node.onModbusWriteError = function (err, msg) {\n      internalDebugLog(err.message)\n      if (node.showErrors) {\n        node.error(err, msg)\n      }\n      mbBasics.setModbusError(node, modbusClient, err, mbCore.getOriginalMessage(node.bufferMessageList, msg))\n    }\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        return\n      }\n\n      if (!modbusClient.client) {\n        return\n      }\n\n      try {\n        if (typeof msg.payload === 'string') {\n          msg.payload = JSON.parse(msg.payload)\n        }\n\n        msg.payload.fc = parseInt(msg.payload.fc)\n        msg.payload.unitid = parseInt(msg.payload.unitid)\n        msg.payload.address = parseInt(msg.payload.address)\n        msg.payload.quantity = parseInt(msg.payload.quantity)\n\n        if (!(Number.isInteger(msg.payload.fc) &&\n              (msg.payload.fc === 5 ||\n                msg.payload.fc === 6 ||\n                msg.payload.fc === 15 ||\n                msg.payload.fc === 16))) {\n          node.error('FC Not Valid', msg)\n          return\n        }\n\n        if (!(Number.isInteger(msg.payload.address) &&\n              msg.payload.address >= 0 &&\n              msg.payload.address <= 65535)) {\n          node.error('Address Not Valid', msg)\n          return\n        }\n\n        if (!(Number.isInteger(msg.payload.quantity) &&\n              msg.payload.quantity >= 1 &&\n              msg.payload.quantity <= 65535)) {\n          node.error('Quantity Not Valid', msg)\n          return\n        }\n\n        /* HTTP requests for boolean and multiple data string [1,2,3,4,5] */\n        if (Object.prototype.hasOwnProperty.call(msg.payload, 'value') && typeof msg.payload.value === 'string') {\n          if (msg.payload.value === 'true' || msg.payload.value === 'false') {\n            msg.payload.value = (msg.payload.value === 'true')\n          } else {\n            if (msg.payload.value.indexOf(',') > -1) {\n              msg.payload.value = JSON.parse(msg.payload.value)\n            }\n          }\n        }\n\n        msg.messageId = mbCore.getObjectId()\n        node.bufferMessageList.set(msg.messageId, msg)\n\n        msg = {\n          topic: msg.topic || node.id,\n          payload: {\n            value: msg.payload.value || msg.value,\n            unitid: msg.payload.unitid,\n            fc: msg.payload.fc,\n            address: msg.payload.address,\n            quantity: msg.payload.quantity,\n            messageId: msg.messageId\n          },\n          _msgid: msg._msgid\n        }\n\n        modbusClient.emit('writeModbus', msg, node.onModbusWriteDone, node.onModbusWriteError)\n      } catch (err) {\n        internalDebugLog(err.message)\n        if (node.showErrors) {\n          node.error(err, msg)\n        }\n      }\n\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n      }\n    })\n\n    node.on('close', function (done) {\n      mbBasics.setNodeStatusTo('closed', node)\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node, done)\n    })\n  }\n\n  RED.nodes.registerType('modbus-flex-write', ModbusFlexWrite)\n}\n"]}