"use strict";module.exports=function(d){require("source-map-support").install();var n=require("modbus-serial"),a=require("./modbus-basics"),u=require("debug")("contribModbus:flex:server");try{d.nodes.registerType("modbus-flex-server",function(e){d.nodes.createNode(this,e);var r=require("vm2"),s=r.VM,t=r.VMScript;this.name=e.name,this.logEnabled=e.logEnabled,this.serverAddress=e.serverAddress||"0.0.0.0",this.serverPort=parseInt(e.serverPort),this.responseDelay=parseInt(e.responseDelay),this.delayUnit=e.delayUnit,this.unitId=e.unitId,this.minAddress=e.minAddress,this.splitAddress=e.splitAddress,this.showErrors=e.showErrors,this.funcGetCoil=new t(e.funcGetCoil).compile(),this.funcGetDiscreteInput=new t(e.funcGetDiscreteInput).compile(),this.funcGetInputRegister=new t(e.funcGetInputRegister).compile(),this.funcGetHoldingRegister=new t(e.funcGetHoldingRegister).compile(),this.funcSetCoil=new t(e.funcSetCoil).compile(),this.funcSetRegister=new t(e.funcSetRegister).compile();var o=this;o.bufferFactor=8,o.coilsBufferSize=parseInt(e.coilsBufferSize*o.bufferFactor),o.registersBufferSize=parseInt(e.registersBufferSize*o.bufferFactor),o.coils=Buffer.alloc(o.coilsBufferSize,0),o.registers=Buffer.alloc(o.registersBufferSize,0),o.modbusServer=null,a.setNodeStatusTo("initialized",o),o.vector={};var i=new s({sandbox:{node:o}});i.run("node.vector.getCoil = "+e.funcGetCoil),i.run("node.vector.getDiscreteInput = "+e.funcGetDiscreteInput),i.run("node.vector.getInputRegister = "+e.funcGetInputRegister),i.run("node.vector.getHoldingRegister = "+e.funcGetHoldingRegister),i.run("node.vector.setCoil = "+e.funcSetCoil),i.run("node.vector.setRegister = "+e.funcSetRegister),o.startServer=function(){try{if(null===o.modbusServer){try{o.modbusServer=new n.ServerTCP(o.vector,{host:o.serverAddress,port:o.serverPort,debug:o.logEnabled,unitID:o.unitId})}catch(e){o.error(e,{payload:"server net error -> for port 502 on unix, you have to be a super user"})}o.modbusServer.on("socketError",function(e){u(e.message),o.showErrors&&o.warn(e),a.setNodeStatusTo("error",o),o.modbusServer.close(function(){o.startServer()})}),o.modbusServer._server.on("connection",function(e){u("Modbus Flex Server client connection"),e&&u("Modbus Flex Server client to "+JSON.stringify(e.address())+" from "+e.remoteAddress+" "+e.remotePort),a.setNodeStatusTo("active",o)})}}catch(e){u(e.message),o.showErrors&&o.warn(e),a.setNodeStatusTo("error",o)}null!=o.modbusServer?(u("Modbus Flex Server listening on modbus://"+o.serverAddress+":"+o.serverPort),a.setNodeStatusTo("initialized",o)):(u("Modbus Flex Server isn't ready"),a.setNodeStatusTo("error",o))},o.startServer(),o.on("input",function(e){if("holding"===e.payload.register||"coils"===e.payload.register||"input"===e.payload.register||"discrete"===e.payload.register){if(!(Number.isInteger(e.payload.address)&&0<=e.payload.address&&e.payload.address<=65535))return void o.error("Address Not Valid",e);switch(e.payload.register){case"holding":o.registers.writeUInt16BE(e.payload.value,(e.payload.address+o.splitAddress)*o.bufferFactor);break;case"coils":o.coils.writeUInt8(e.payload.value,e.payload.address*o.bufferFactor);break;case"input":o.registers.writeUInt16BE(e.payload.value,e.payload.address*o.bufferFactor);break;case"discrete":o.coils.writeUInt8(e.payload.value,(e.payload.address+o.splitAddress)*o.bufferFactor)}}1!==e.payload.disablemsg&&o.send(function(e){return[{type:"holding",message:e,payload:o.registers.slice(o.splitAddress*o.bufferFactor)},{type:"coils",message:e,payload:o.coils.slice(0,o.splitAddress*o.bufferFactor)},{type:"input",message:e,payload:o.registers.slice(0,o.splitAddress*o.bufferFactor)},{type:"discrete",message:e,payload:o.coils.slice(o.splitAddress*o.bufferFactor)}]}(e))}),o.on("close",function(){a.setNodeStatusTo("closed",o),o.modbusServer._server&&o.modbusServer._server.close(),o.modbusServer=null})})}catch(e){u(e.message)}};
//# sourceMappingURL=maps/modbus-flex-server.js.map
