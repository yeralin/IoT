esphome:
  name: smart_feeder
  platform: ESP8266
  board: nodemcuv2
  includes:
    - crowtail_weight_sensor.h

globals:
  - id: target_weight # in grams
    type: int
    restore_value: yes
    initial_value: '30'
  - id: feeder_interval # in hours
    type: int
    restore_value: yes
    initial_value: '5'
  - id: hours_since_last_feed
    type: int
    restore_value: yes
    initial_value: '0'
  - id: performed_rotations
    type: int
    initial_value: '0'
  - id: is_feeder_broken
    type: bool
    initial_value: 'false'
  - id: is_auto_feeding_on
    type: bool
    initial_value: 'true'


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

logger:

ota:

script:
 - id: feed
   then:
      - while:
          condition:
            - lambda: |-
                return id(performed_rotations) < 10;
            - lambda: |-
                return id(crowtail_weight_sensor).state <= id(target_weight);
          then:
            - servo.write:
                id: pet_feeder
                level: -100.0%
            - delay: 2s
            - servo.write:
                id: pet_feeder
                level: 100.0%
            - delay: 2s
            - lambda: id(performed_rotations) += 1;
      - lambda: |-
          if(id(performed_rotations) >= 10) {
            id(is_feeder_broken) = true;
          } else {
            id(is_feeder_broken) = false;
          }
          id(performed_rotations) = 0;

api:
  reboot_timeout: 0s
  services:
    # Update weight and time period of the feeder
    - service: change_target_weight
      variables:
        new_target_weight: int
      then:
        - lambda: 'id(target_weight) = new_target_weight;'
    - service: change_feed_interval
      variables:
        new_feed_interval: int
      then:
        - lambda: 'id(feeder_interval) = new_feed_interval;'
    # Turn On/Off automatic feeding
    - service: toggle_automatic_feeding
      then:
        - lambda: 'id(is_auto_feeding_on) = id(is_auto_feeding_on) ^ true;'
    # Manual feeder trigger through HA
    - service: refill_food
      then:
        - script.execute: feed

sensor:
  # Custom weight sensor
  - platform: custom
    lambda: |-
      auto weight_sensor = new CrowtailWeightSensor();
      App.register_component(weight_sensor);
      return {weight_sensor};
    sensors:
      name: "Weight Sensor"
      id: crowtail_weight_sensor
      unit_of_measurement: gram
  # Template sensors to communicate values to HA
  - platform: template
    name: "Hours since last feed"
    lambda: 'return id(hours_since_last_feed);'
  - platform: template
    name: "Pet feeder interval"
    lambda: 'return id(feeder_interval);'
  - platform: template
    name: "Pet feeder target weight"
    lambda: 'return id(target_weight);'
  - platform: template
    name: "Is feeder broken"
    lambda: 'return id(is_feeder_broken);'
    on_value:
      then:
       - lambda: |-
           if (id(is_feeder_broken) == false) {
             id(is_auto_feeding_on) = true;
           }
  - platform: template
    name: "Is automatic feeding on"
    lambda: 'return id(is_auto_feeding_on);'

interval:
 - interval: 1h
   then:
    - if:
        condition:
          - lambda: 'return id(feeder_interval) <= id(hours_since_last_feed);'
        then:
         - lambda: 'id(hours_since_last_feed) = 0;'
         - if:
             condition:
               lambda: 'return id(is_auto_feeding_on);' # Skip if auto feeding is off
             then:
               script.execute: feed
        else:
          - lambda: 'id(hours_since_last_feed) += 1;'

servo:
  - id: pet_feeder
    output: pwm_output

output:
  - platform: esp8266_pwm
    id: pwm_output
    pin: D5
    frequency: 50 Hz
