"use strict";require("source-map-support").install();var de=de||{biancoroyal:{modbus:{core:{client:{}}}}};de.biancoroyal.modbus.core.client.internalDebug=de.biancoroyal.modbus.core.client.internalDebug||require("debug")("contribModbus:core:client"),de.biancoroyal.modbus.core.client.internalDebugFSM=de.biancoroyal.modbus.core.client.internalDebugFSM||require("debug")("contribModbus:core:client:fsm"),de.biancoroyal.modbus.core.client.modbusSerialDebug=de.biancoroyal.modbus.core.client.modbusSerialDebug||require("debug")("modbus-serial"),de.biancoroyal.modbus.core.client.XStateFSM=de.biancoroyal.modbus.core.client.XStateFSM||require("@xstate/fsm"),de.biancoroyal.modbus.core.client.stateLogEnabled=de.biancoroyal.modbus.core.client.stateLogEnabled||!1,de.biancoroyal.modbus.core.client.networkErrors=["ESOCKETTIMEDOUT","ETIMEDOUT","ECONNRESET","ENETRESET","ECONNABORTED","ECONNREFUSED","ENETUNREACH","ENOTCONN","ESHUTDOWN","EHOSTDOWN","ENETDOWN","EWOULDBLOCK","EAGAIN","EHOSTUNREACH"],de.biancoroyal.modbus.core.client.createStateMachineService=function(){return this.stateLogEnabled=!1,this.XStateFSM.createMachine({id:"modbus",initial:"new",states:{new:{on:{INIT:"init",STOP:"stopped"}},broken:{on:{INIT:"init",STOP:"stopped",FAILURE:"failed",CLOSE:"closed",ACTIVATE:"activated"}},init:{on:{OPENSERIAL:"opened",CONNECT:"connected",FAILURE:"failed"}},opened:{on:{CONNECT:"connected",FAILURE:"failed",CLOSE:"closed"}},connected:{on:{CLOSE:"closed",ACTIVATE:"activated",FAILURE:"failed"}},activated:{on:{CLOSE:"closed",READ:"reading",WRITE:"writing",QUEUE:"queueing",FAILURE:"failed"}},queueing:{on:{ACTIVATE:"activated",READ:"reading",WRITE:"writing",EMPTY:"empty",FAILURE:"failed",CLOSE:"closed"}},empty:{on:{QUEUE:"queueing",FAILURE:"failed",CLOSE:"closed"}},reading:{on:{ACTIVATE:"activated",FAILURE:"failed"}},writing:{on:{ACTIVATE:"activated",FAILURE:"failed"}},closed:{on:{FAILURE:"failed",BREAK:"broken",CONNECT:"connected"}},failed:{on:{CLOSE:"closed",BREAK:"broken",STOP:"stopped"}},stopped:{on:{NEW:"new",STOP:"stopped"}}}})},de.biancoroyal.modbus.core.client.startStateService=function(e){return this.XStateFSM.interpret(e).start()},de.biancoroyal.modbus.core.client.checkUnitId=function(e,a){return"tcp"===a?0<=e&&e<=255:1<=e&&e<=247},de.biancoroyal.modbus.core.client.readModbus=function(a,t,n,i){if(a.client){a.bufferCommands||a.stateService.send("READ"),a.setUnitIdFromPayload(t),a.client.setTimeout(a.clientTimeout),a.queueLog(JSON.stringify({info:"read msg",message:t.payload,unitid:t.queueUnitId,timeout:a.client.getTimeout(),state:a.actualServiceState.value}));try{switch(parseInt(t.payload.fc)){case 1:a.client.readCoils(parseInt(t.payload.address),parseInt(t.payload.quantity)).then(function(e){a.activateSending(t),n(e,t)}).catch(function(e){a.activateSending(t),i(e,t),a.modbusErrorHandling(e)});break;case 2:a.client.readDiscreteInputs(parseInt(t.payload.address),parseInt(t.payload.quantity)).then(function(e){a.activateSending(t),n(e,t)}).catch(function(e){a.activateSending(t),i(e,t),a.modbusErrorHandling(e)});break;case 3:a.client.readHoldingRegisters(parseInt(t.payload.address),parseInt(t.payload.quantity)).then(function(e){a.activateSending(t),n(e,t)}).catch(function(e){a.activateSending(t),i(e,t),a.modbusErrorHandling(e)});break;case 4:a.client.readInputRegisters(parseInt(t.payload.address),parseInt(t.payload.quantity)).then(function(e){a.activateSending(t),n(e,t)}).catch(function(e){a.activateSending(t),i(e,t),a.modbusErrorHandling(e)});break;default:a.activateSending(t),i(new Error("Function Code Unknown"),t),this.internalDebug("Function Code Unknown %s",t.payload.fc)}}catch(e){this.internalDebug(e.message),a.modbusErrorHandling(e)}}},de.biancoroyal.modbus.core.client.writeModbus=function(a,t,n,i){if(a.client){a.bufferCommands||a.stateService.send("WRITE"),a.setUnitIdFromPayload(t),a.client.setTimeout(a.clientTimeout),a.queueLog(JSON.stringify({info:"write msg",message:t.payload,unitid:t.queueUnitId,timeout:a.client.getTimeout(),state:a.actualServiceState.value}));try{switch(parseInt(t.payload.fc)){case 15:parseInt(t.payload.value.length)!==parseInt(t.payload.quantity)?(a.activateSending(t),i(new Error("Quantity should be less or equal to coil payload array length: "+t.payload.value.length+" Addr: "+t.payload.address+" Q: "+t.payload.quantity),t)):a.client.writeCoils(parseInt(t.payload.address),t.payload.value).then(function(e){a.activateSending(t),n(e,t)}).catch(function(e){a.activateSending(t),i(e,t),a.modbusErrorHandling(e)});break;case 5:t.payload.value?t.payload.value=!0:t.payload.value=!1,a.client.writeCoil(parseInt(t.payload.address),t.payload.value).then(function(e){a.activateSending(t),n(e,t)}).catch(function(e){a.activateSending(t),i(e,t),a.modbusErrorHandling(e)});break;case 16:parseInt(t.payload.value.length)!==parseInt(t.payload.quantity)?(a.activateSending(t),i(new Error("Quantity should be less or equal to register payload array length: "+t.payload.value.length+" Addr: "+t.payload.address+" Q: "+t.payload.quantity),t)):a.client.writeRegisters(parseInt(t.payload.address),t.payload.value).then(function(e){a.activateSending(t),n(e,t)}).catch(function(e){a.activateSending(t),i(e,t),a.modbusErrorHandling(e)});break;case 6:a.client.writeRegister(parseInt(t.payload.address),parseInt(t.payload.value)).then(function(e){a.activateSending(t),n(e,t)}).catch(function(e){a.activateSending(t),i(e,t),a.modbusErrorHandling(e)});break;default:a.activateSending(t),i(new Error("Function Code Unknown"),t),this.internalDebug("Function Code Unknown %s",t.payload.fc)}}catch(e){this.internalDebug(e.message),a.modbusErrorHandling(e)}}},de.biancoroyal.modbus.core.client.setNewNodeSettings=function(e,a){switch(a||this.internalDebug("New Connection message invalid."),a.payload.connectorType){case"TCP":e.tcpHost=a.payload.tcpHost||e.tcpHost,e.tcpPort=a.payload.tcpPort||e.tcpPort,e.tcpType=a.payload.tcpType||e.tcpType,this.internalDebug("New Connection Data "+e.tcpHost+" "+e.tcpPort+" "+e.tcpType);break;case"SERIAL":a.payload.serialPort&&(e.serialPort=a.payload.serialPort||e.serialPort),a.payload.serialBaudrate&&(e.serialBaudrate=parseInt(a.payload.serialBaudrate)||e.serialBaudrate),e.serialDatabits=a.payload.serialDatabits||e.serialDatabits,e.serialStopbits=a.payload.serialStopbits||e.serialStopbits,e.serialParity=a.payload.serialParity||e.serialParity,e.serialType=a.payload.serialType||e.serialType,a.payload.serialConnectionDelay&&(e.serialConnectionDelay=parseInt(a.payload.serialConnectionDelay)||e.serialConnectionDelay),this.internalDebug("New Connection Data "+e.serialPort+" "+e.serialBaudrate+" "+e.serialType);break;default:this.internalDebug("Unknown Dynamic Reconnect Type "+a.payload.connectorType)}a.payload.unitId&&(e.unit_id=parseInt(a.payload.unitId)||e.unit_id),a.payload.commandDelay&&(e.commandDelay=parseInt(a.payload.commandDelay)||e.commandDelay),a.payload.clientTimeout&&(e.clientTimeout=parseInt(a.payload.clientTimeout)||e.clientTimeout),a.payload.reconnectTimeout&&(e.reconnectTimeout=parseInt(a.payload.reconnectTimeout)||e.reconnectTimeout)},de.biancoroyal.modbus.core.client.messagesAllowedStates=["activated","queueing","empty"],module.exports=de.biancoroyal.modbus.core.client;
//# sourceMappingURL=../maps/core/modbus-client-core.js.map
