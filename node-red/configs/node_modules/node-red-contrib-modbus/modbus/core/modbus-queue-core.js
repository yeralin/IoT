"use strict";require("source-map-support").install();var de=de||{biancoroyal:{modbus:{queue:{core:{}}}}};de.biancoroyal.modbus.queue.core.internalDebug=de.biancoroyal.modbus.queue.core.internalDebug||require("debug")("contribModbus:queue:core"),de.biancoroyal.modbus.queue.core.core=de.biancoroyal.modbus.queue.core.core||require("./modbus-core"),de.biancoroyal.modbus.queue.core.initQueue=function(e){e.bufferCommandList.clear(),e.sendAllowed.clear(),e.sendToDeviceAllowed=[],e.unitSendingAllowed=[];for(var n=0;n<=255;n++)e.bufferCommandList.set(n,[]),e.sendAllowed.set(n,!0)},de.biancoroyal.modbus.queue.core.checkQueuesAreEmpty=function(e){for(var n=!0,u=0;u<=255;u++)n&=0<e.bufferCommandList.get(u).length;return n},de.biancoroyal.modbus.queue.core.sequentialDequeueCommand=function(e){var n=e.unitSendingAllowed.length,u=parseInt(e.unitSendingAllowed.shift()),t=!0;Number.isInteger(u)&&0<e.bufferCommandList.get(u).length?t=e.parallelUnitIdsAllowed?this.sendDataInParallel(e,u,n):this.sendDataPerDevice(e,u,n):e.queueLog(JSON.stringify({type:"queue check is not a unit",unitid:u})),t&&e.stateService.send("EMPTY")},de.biancoroyal.modbus.queue.core.sendDataInParallel=function(e,n,u){var t=null,i=!0;return e.queueLog(JSON.stringify({type:"queue check",unitid:n,sendAllowed:e.sendAllowed.get(n),queueLength:e.bufferCommandList.get(n).length})),e.sendAllowed.get(n)&&(t=e.bufferCommandList.get(n).shift())&&(e.sendAllowed.set(n,!1),e.queueLog(JSON.stringify({type:"serial sending and wait per unitid",unitid:n,queueLength:e.bufferCommandList.get(n).length,sendAllowedForNext:e.sendAllowed.get(n),delay:e.commandDelay})),0<e.bufferCommandList.get(n).length&&e.unitSendingAllowed.push(n),i=!1,t.callModbus(e,t.msg,t.cb,t.cberr)),i},de.biancoroyal.modbus.queue.core.sendDataPerDevice=function(e,n,u){var t=null,i=!0;return e.queueLog(JSON.stringify({type:"queue check",unitid:n,sendAllowed:e.sendAllowed.get(n),queueLength:e.bufferCommandList.get(n).length})),0===e.sendToDeviceAllowed.length&&(t=e.bufferCommandList.get(n).shift())&&(e.sendToDeviceAllowed.push(n),e.queueLog(JSON.stringify({type:"serial sending and wait",unitid:n,queueLength:e.bufferCommandList.get(n).length,sendAllowedForNext:e.sendToDeviceAllowed.length,delay:e.commandDelay})),0<e.bufferCommandList.get(n).length&&e.unitSendingAllowed.push(n),i=!1,t.callModbus(e,t.msg,t.cb,t.cberr)),i},de.biancoroyal.modbus.queue.core.dequeueCommand=function(e){var n=e.actualServiceState;-1===e.messageAllowedStates.indexOf(n.value)?e.queueLog(JSON.stringify({state:n.value,message:"dequeue command disallowed state",delay:e.commandDelay})):(e.queueLog(JSON.stringify({state:n.value,message:"dequeue command "+e.clienttype,delay:e.commandDelay})),this.sequentialDequeueCommand(e)),this.checkQueuesAreEmpty(e)&&e.stateService.send("EMPTY")},de.biancoroyal.modbus.queue.core.getQueueNumber=function(e,n){var u=parseInt(n.payload.unitid);return Number.isInteger(u)?e.bufferCommandList.get(u).length:e.bufferCommandList.get(e.unit_id).length},de.biancoroyal.modbus.queue.core.pushToQueueByUnitId=function(e,n,u,t,i){var d=parseInt(u.payload.unitid);Number.isInteger(d)?(u.queueUnit=d,e.queueLog(JSON.stringify({info:"push to Queue by Unit-Id",message:u.payload,unit:d,sendingListLength:e.unitSendingAllowed.length})),e.unitSendingAllowed.push(d),e.bufferCommandList.get(d).push({callModbus:n,msg:u,cb:t,cberr:i})):(u.queueUnit=e.unit_id,e.queueLog(JSON.stringify({info:"push to Queue by default Unit-Id",message:u.payload,unit:e.unit_id,sendingListLength:e.unitSendingAllowed.length})),-1===e.unitSendingAllowed.indexOf(e.unit_id)&&e.unitSendingAllowed.push(e.unit_id),e.bufferCommandList.get(e.unit_id).push({callModbus:n,msg:u,cb:t,cberr:i}))},module.exports=de.biancoroyal.modbus.queue.core;
//# sourceMappingURL=../maps/core/modbus-queue-core.js.map
