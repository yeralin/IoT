{"version":3,"sources":["modbus-response.js"],"names":["module","exports","RED","require","install","mbBasics","setNodeStatusTo","config","createNode","this","registerShowMax","node","ModbusResponse","msg","on","Object","prototype","hasOwnProperty","call","payload","inputType","data","length","setNodeStatusByResponseTo","setNodeStatusResponse","JSON","stringify"],"mappings":"aAeAA,OAAOC,QAAU,SAAUC,GAEzBC,QAAQ,sBAAsBC,UAFhCJ,IAAOC,EAAUE,QAAUD,mBA8CrBG,EAAAA,MAAAA,aAASC,kBAzCb,SAAyBC,GAHzBJ,EAAAA,MAAQK,WAAAC,KAARF,GACAE,KAAMJ,gBAAmBE,EAAAG,gBAEzB,IAAAC,EAASC,KAGPP,EAAKK,gBAAkBH,cAAOG,GAI9BL,EAAAA,GAAQ,QAACC,SAAgBO,GAEzBF,IAAKG,EAAY,UAWf,OARIC,OAAOC,UAAUC,eAAeC,KAAKL,EAAIM,QAAS,UAAtDC,EAAWJ,QAIPD,OAAOC,UAAUC,eAAeC,KAAKL,EAAIM,QAAS,aAAtDC,EAAWJ,WAIHI,GAAR,IAAA,OACOP,EAAAM,QAALE,KAAAC,OAAAX,EAAAD,gBACEL,EAAQc,sBAAsBR,EAAKD,QAAAA,KAAnCY,OAAoDX,GAApDN,EAEOkB,0BAAA,SAAAV,EAAAM,QAAAR,GAEN,MAEH,IAAK,UADHE,EAAAM,QAAAG,QAAAT,EAAAM,QAAAG,OAAAX,EAAAD,gBAGEL,EAASmB,sBAAsBX,EAAIM,QAAQG,OAAQX,GADrDN,EAAQc,0BAAkB,SAAqBR,EAAIQ,QAACT,GAEnD,MACCL,QACDA,EAAAkB,0BAAA,SAAAE,KAAAC,UAAAb,EAAAM,SAAAR,MAEHA,EAAAG,GAAA,QAAA,WACET,EAAAA,gBAASkB,SAAAA","file":"../modbus-response.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019 Klaus Landsdorf (https://bianco-royal.com/)\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n/**\n * Modbus Response node.\n * @module NodeRedModbusResponse\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n\n  function ModbusResponse (config) {\n    RED.nodes.createNode(this, config)\n\n    this.registerShowMax = config.registerShowMax\n\n    const node = this\n\n    mbBasics.setNodeStatusTo('initialized', node)\n\n    node.on('input', function (msg) {\n      let inputType = 'default'\n\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'data')) {\n        inputType = 'data'\n      }\n\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'address')) {\n        inputType = 'address'\n      }\n\n      switch (inputType) {\n        case 'data':\n          if (msg.payload.data.length > node.registerShowMax) {\n            mbBasics.setNodeStatusResponse(msg.payload.data.length, node)\n          } else {\n            mbBasics.setNodeStatusByResponseTo('active', msg.payload, node)\n          }\n          break\n        case 'address':\n          if (msg.payload.length && msg.payload.length > node.registerShowMax) {\n            mbBasics.setNodeStatusResponse(msg.payload.length, node)\n          } else {\n            mbBasics.setNodeStatusByResponseTo('active', msg.payload, node)\n          }\n          break\n        default:\n          mbBasics.setNodeStatusByResponseTo('active', JSON.stringify(msg.payload), node)\n      }\n    })\n\n    node.on('close', function () {\n      mbBasics.setNodeStatusTo('closed', node)\n    })\n  }\n\n  RED.nodes.registerType('modbus-response', ModbusResponse)\n}\n"]}