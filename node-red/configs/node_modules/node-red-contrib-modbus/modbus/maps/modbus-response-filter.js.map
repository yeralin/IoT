{"version":3,"sources":["modbus-response-filter.js"],"names":["module","exports","RED","require","install","mbBasics","modbusIOFileValuNames","httpAdmin","config","mbCore","createNode","this","filter","registers","filterResponseBuffer","nodes","name","filterInput","showErrors","ioFile","node","configData","setNodeStatusTo","msg","filterFromPayload","payload","item","responseBuffer","values","input","on","invalidPayloadIn","length","send","error","Error","internalDebug","get","auth","needsPermission","req","res","json"],"mappings":"aAaAA,OAAOC,QAAU,SAAUC,GAEzBC,QAAQ,sBAAsBC,UAFhCJ,IAAOC,EAAUE,QAAA,sBACfE,EAAAF,QAAA,mBAIIG,EAAwB,GA2E5BJ,EAAIK,MAAAA,aAAc,yBAzElB,SAA+BC,GAJ/BN,EAAMO,MAAMC,WAAWC,KAAAH,GACvBG,KAAMN,KAAQG,EAAGL,KAOfQ,KAAKC,OAASJ,EAAOI,OANvBD,KAAIL,UAAAA,SAAwBE,EAA5BK,YAAA,KAEAF,KAAAG,qBAA+BN,EAA/BM,qBACEZ,KAAIa,aAAJP,EAA2BA,aAE3BG,KAAKK,YAAcA,EAAnBC,YAEAN,KAAKE,qBAAqBL,EAAOK,qBAEjCF,KAAKG,WAAAA,EAALI,WAEAP,KAAKM,OAAAA,EAALF,MAAmBP,QAAOS,EAA1BE,QAGA,IAAKD,EAAAA,KAILZ,EAAAc,EAAAD,OAAAE,WAIAhB,EAASiB,gBAAgB,SAAUF,GAGjCd,EAAAA,OAAAA,GAAAA,gBAAwBe,SAAxBA,GADFf,EAAAe,IAKEE,EAAGC,kBAAeC,SAAeF,GADnC,OAEIA,EAAAE,QAAYT,EAALS,QAAcL,OAAKR,SAA1Bc,GADF,OAAAA,EAAAV,OAAAI,EAAAR,SAKEQ,EAAOG,6BACRA,EAAAI,eAGCP,EAAOG,qBACRA,EAAAK,OAGCR,EAAOG,oBACRA,EAAAM,MAfHN,GAqBEH,EAAAU,GAAIzB,QAAS0B,SAAAA,GACX1B,EAAA0B,iBAAAR,KAIAH,EAAKG,WAA0BE,EAAdO,EAAbnB,UACFU,EAAIH,QAAKF,QAAYK,EAAAE,QAAAO,SAAAZ,EAAAP,UAKrBO,EAAKa,KAAKb,EAAKI,kBAAkBD,KAJ/BH,EAAKc,YACNd,EAAAc,MAAA,IAAAC,MAAAZ,EAAAE,QAAAO,OAAA,mBAAAZ,EAAAP,YACDJ,EAAO2B,cAAcb,EAAIE,QAAQO,OAAS,mCAAqCZ,EAAKP,UAAY,oBAMlGO,EAAKa,KAAKb,EAAKI,kBAAkBD,OAKnClB,EAAAA,GAAAA,QAASiB,WADXjB,EAAAiB,gBAAA,SAAAF,OASDlB,EAFDK,UAAA8B,IAAA,4BAAAnC,EAAAoC,KAAAC,gBAAA,eAAA,SAAAC,EAAAC,GAhFFA,EAAAC,KAAApC","file":"../modbus-response-filter.js","sourcesContent":["/**\n Copyright (c) 2017,2018 Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n/**\n * Modbus flexible Getter node.\n * @module NodeRedModbusFlexGetter\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbCore = require('./core/modbus-core')\n  const mbBasics = require('./modbus-basics')\n  var modbusIOFileValuNames = []\n\n  function ModbusResponseFilter (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.filter = config.filter\n    this.registers = parseInt(config.registers) || null\n\n    this.filterResponseBuffer = config.filterResponseBuffer\n    this.filterValues = config.filterValues\n    this.filterInput = config.filterInput\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n\n    this.ioFile = RED.nodes.getNode(config.ioFile)\n\n    const node = this\n\n    modbusIOFileValuNames = node.ioFile.configData\n\n    mbBasics.setNodeStatusTo('active', node)\n\n    node.ioFile.on('updatedConfig', function (configData) {\n      modbusIOFileValuNames = configData\n    })\n\n    node.filterFromPayload = function (msg) {\n      msg.payload = msg.payload.filter((item) => {\n        return item.name === node.filter\n      })\n\n      if (node.filterResponseBuffer) {\n        delete msg.responseBuffer\n      }\n\n      if (node.filterValues) {\n        delete msg.values\n      }\n\n      if (node.filterInput) {\n        delete msg.input\n      }\n\n      return msg\n    }\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg)) {\n        return\n      }\n\n      if (node.registers && node.registers > 0) {\n        if (!msg.payload.length || msg.payload.length !== node.registers) {\n          if (node.showErrors) {\n            node.error(new Error(msg.payload.length + ' does not match ' + node.registers))\n          }\n          mbCore.internalDebug(msg.payload.length + ' Registers And Filter Length Of ' + node.registers + ' Does Not Match')\n        } else {\n          node.send(node.filterFromPayload(msg))\n        }\n      } else {\n        // without register safety\n        node.send(node.filterFromPayload(msg))\n      }\n    })\n\n    node.on('close', function () {\n      mbBasics.setNodeStatusTo('closed', node)\n    })\n  }\n\n  RED.nodes.registerType('modbus-response-filter', ModbusResponseFilter)\n\n  RED.httpAdmin.get('/modbus/iofile/valuenames', RED.auth.needsPermission('iofile.read'), function (req, res) {\n    res.json(modbusIOFileValuNames)\n  })\n}\n"]}